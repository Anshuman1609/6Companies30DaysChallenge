Day2

Q1. Combination Sum III
    
  Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
    Only numbers 1 through 9 are used.
    Each number is used at most once.
    Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Solution :-

    class Solution {
    public:
        void Solve(int ind, int k, int target, vector<int> &arr, vector<int> &ds, vector<vector<int>> &ans) {
            if (ds.size() == k) { 
                if (target == 0) {
                    ans.push_back(ds);
                }   
                return;
            }
            for (int i = ind; i < arr.size(); i++) {
                if (target < arr[i])
                    break;
                target = target - arr[i];
                ds.push_back(arr[i]);
                Solve(i + 1, k, target, arr, ds, ans);
                target = target + arr[i];
                ds.pop_back();
                }
    
            return;
        }
        vector<vector<int>> combinationSum3(int k, int n) {
            
            vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
            vector<vector<int>> ans;
            vector<int> ds;
            Solve(0, k, n, arr, ds, ans);
            return ans;
        }
    };
      



Q3. Random Flip Matrix
    There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned
    Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.
    Implement the Solution class:
        Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
        int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
        void reset() Resets all the values of the matrix to be 0.

Solution :- 
    class Solution {
            int i,j;
            int m,n;
        public:
            Solution(int m, int n) {
                i = 0;
                j = 0;
                this -> m = m;
                this -> n = n;
            }
            
            vector<int> flip() {
                vector<int> ans =  {i,j};
                j = (j + 1);
                if(j == n){
                    j = 0;
                    i += 1;
                    if(i == m){
                        i = 0;
                    }
                }
                return ans;
            }
            
            void reset() {
                
            }
        };




Q3. Letter Combinations Of a Phone Number
        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Solution :- 

        class Solution {
        public:
            vector<string> letterCombinations(string digits) {
                int n=digits.size();
                if(n==0)return {};        
                string mapping[] = {"0","0","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};        
                vector<string>prev;     
                for(auto a: mapping[digits[0]-'0']){
                    prev.push_back(string(1, a));
                }                
                for(int i=1;i<n;i++){
                    vector<string>cur;
                    for(auto a: mapping[digits[i]-'0']){                
                        for(auto b:prev){
                            cur.push_back(b+a);
                        }
                    }
                    prev = cur;
                }
                return prev;
            }
        };
