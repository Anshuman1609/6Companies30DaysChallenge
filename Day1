Q1. Minimize the maximum of Two arrays :- 
    We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:
    
     * arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.
     * arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.
     * No integer is present in both arr1 and arr2.
    Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.

 Solution :-  Using Binary Search
    class Solution {
        typedef long long ll;
    public:
        int minimizeSet(int div1, int div2, int count1, int count2) {
            int l = 1;
            int r = INT_MAX;
            int ans = -1;
            ll lcm = (ll) div1 * div2 / __gcd(div1, div2);
            while(l<=r){
                int mid = (l+((r-l) >> 1));
                int cnt1 = mid - mid/div1;
                int cnt2 = mid - mid/div2;
                ll combined = mid - mid/lcm;
                if(cnt1 >= count1 && cnt2 >= count2 && combined >= count1 + count2){
                    ans = mid;
                    r = mid - 1;
                }
                else{
                    l = mid + 1;
                }
            }
            return ans;
        }
    };







Q2. High-Access Employees :- 
    You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.
    The access time is represented as four digits using a 24-hour time format, for example, "0800" or "2250".    
    An employee is said to be high-access if he has accessed the system three or more times within a one-hour period.
    Times with exactly one hour of difference are not considered part of the same one-hour period. For example, "0815" and "0915" are not part of the same one-hour period.
    Access times at the start and end of the day are not counted within the same one-hour period. For example, "0005" and "2350" are not part of the same one-hour period.
    Return a list that contains the names of high-access employees with any order you want.

Solution :- 
    class Solution {
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        unordered_map<string, vector<int>> mp;
        for (auto& it : access_times) {
            int time = stoi(it[1]);
            mp[it[0]].push_back(time);
        }
        for (auto& it : mp) {
            sort(it.second.begin(), it.second.end());
        }
        vector<string> ans;
        for (auto& it : mp) {
            vector<int>& times = it.second;
            for (int i = 2; i < times.size(); i++) {
                if (times[i] - times[i - 2] < 100) {
                    ans.push_back(it.first);
                    break;
                }
            }
        }
        return ans;

    }
};





Q3. Query Kth Smallest Trimmed Number
        You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.
        You are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:
            * Trim each number in nums to its rightmost trimi digits.
            * Determine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.
            * Reset each number in nums to its original length.
        Return an array answer of the same length as queries, where answer[i] is the answer to the ith query.
            * To trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
            * Strings in nums may contain leading zeros.

Solution :- 
        class Solution {
        public:
            vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& queries) {
                vector<int>ans;
                for(int i=0;i<queries.size();i++){
                    int k=queries[i][0];
                    int trim=queries[i][1];
                    priority_queue<pair<string,int>,vector<pair<string,int>>,greater<pair<string,int>>>pq;
                    for(int j=0;j<nums.size();j++){
                        string temp=nums[j];
                        string res;
                        for(int l=temp.size()-trim;l<temp.size();l++)
                            res+=temp[l];
                        pq.push({res,j});
                    }
                    int top;
                    while(!pq.empty() && k-- ){
                        top=pq.top().second;
                        pq.pop();
                    }
                    ans.push_back(top);
                    
                    
                }
                return ans;
                
            }
        };
            
